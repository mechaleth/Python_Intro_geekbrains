# Создайте собственный класс-исключение, который должен
# проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере.
# Необходимо запрашивать у пользователя данные и
# заполнять список только числами.
# Класс-исключение должен контролировать типы данных элементов списка.
#
# **Примечание:**длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь
# сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список с числами выводится на экран.
# **Подсказка:**для данного задания примем,
# что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо
# реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить
# пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

# класс-исключение сам проверяет содержимое списка на наличие только чисел?
# и вызывает себя тоже сам?
# я понял, что класс-исключение САМ ДОБАВЛЯЕТ ИЛИ НЕ ДОБАВЛЯЕТ элемент в список...

from common import get_number_by_string


class NotNumberException(ValueError):

    def __init__(self, message: str, *args, **keyargs):
        self.message = message
        super().__init__(args, keyargs)

    # вообще, выглядит криво, это не функционал исключений.
    # Лучше это выделить как отдельную функцию.
    # Но раз так можно и есть намёки в задании, то ладно,
    # тем более, урок по ООП)
    # пусть всё делает метод класса, чтоб не смущать пользователя
    @classmethod
    def safe_append_to_list(cls, numstring_list: list, value):
        """
        Проверка (не) числовых значений, (не) добавляемых в список

        :param numstring_list: список
        :param value: значение (число или нет)
        :return: None или вызов ошибки этого класса
        """
        if not (isinstance(value, float) or isinstance(value, int)):
            raise cls(f'element {value} of list is not a digit!')
        else:
            numstring_list.append(value)

    def __str__(self):
        return self.message


if __name__ == "__main__":
    num_list = list()
    while True:
        element = input("Input a digit (or try to input something else), please >>>")
        if element == "stop":
            print(num_list)
            break
        # попытка преобразования в число
        try:
            element = get_number_by_string(element)
        except ValueError:
            # ну строка так строка
            pass
        # собственно, задание
        try:
            NotNumberException.safe_append_to_list(num_list, element)
        except NotNumberException as error:
            print(error)
